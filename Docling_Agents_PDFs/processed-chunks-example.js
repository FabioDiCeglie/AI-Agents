[
  {
    text: "Version 1.0\nChristoph Auer Maksym Lysak Ahmed Nassar Michele Dolfi Nikolaos Livathinos Panos Vagenas Cesar Berrospi Ramis Matteo Omenetti Fabian Lindlbauer Kasper Dinkla Lokesh Mishra Yusik Kim Shubham Gupta Rafael Teixeira de Lima Valery Weber Lucas Morin Ingmar Meijer Viktor Kuropiatnyk Peter W. J. Staar\nAI4K Group, IBM Research R¨ uschlikon, Switzerland",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [1],
      title: "Docling Technical Report",
    },
  },
  {
    text: "This technical report introduces Docling , an easy to use, self-contained, MITlicensed open-source package for PDF document conversion. It is powered by state-of-the-art specialized AI models for layout analysis (DocLayNet) and table structure recognition (TableFormer), and runs efficiently on commodity hardware in a small resource budget. The code interface allows for easy extensibility and addition of new features and models.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [1],
      title: "Abstract",
    },
  },
  {
    text: "Converting PDF documents back into a machine-processable format has been a major challenge for decades due to their huge variability in formats, weak standardization and printing-optimized characteristic, which discards most structural features and metadata. With the advent of LLMs and popular application patterns such as retrieval-augmented generation (RAG), leveraging the rich content embedded in PDFs has become ever more relevant. In the past decade, several powerful document understanding solutions have emerged on the market, most of which are commercial software, cloud offerings [3] and most recently, multi-modal vision-language models. As of today, only a handful of open-source tools cover PDF conversion, leaving a significant feature and quality gap to proprietary solutions.\nWith Docling , we open-source a very capable and efficient document conversion tool which builds on the powerful, specialized AI models and datasets for layout analysis and table structure recognition we developed and presented in the recent past [12, 13, 9]. Docling is designed as a simple, self-contained python library with permissive license, running entirely locally on commodity hardware. Its code architecture allows for easy extensibility and addition of new features and models.\nHere is what Docling delivers today:\n· Converts PDF documents to JSON or Markdown format, stable and lightning fast\n· Understands detailed page layout, reading order, locates figures and recovers table structures\n· Extracts metadata from the document, such as title, authors, references and language\n· Optionally applies OCR, e.g. for scanned PDFs\n· Can be configured to be optimal for batch-mode (i.e high throughput, low time-to-solution) or interactive mode (compromise on efficiency, low time-to-solution)\n· Can leverage different accelerators (GPU, MPS, etc).",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [1, 2],
      title: "1 Introduction",
    },
  },
  {
    text: 'To use Docling, you can simply install the docling package from PyPI. Documentation and examples are available in our GitHub repository at github.com/DS4SD/docling. All required model assets 1 are downloaded to a local huggingface datasets cache on first use, unless you choose to pre-install the model assets in advance.\nDocling provides an easy code interface to convert PDF documents from file system, URLs or binary streams, and retrieve the output in either JSON or Markdown format. For convenience, separate methods are offered to convert single documents or batches of documents. A basic usage example is illustrated below. Further examples are available in the Doclign code repository.\n```\nfrom docling.document_converter import DocumentConverter Large\n```\n```\nsource = "https://arxiv.org/pdf/2206.01062" # PDF path or URL converter = DocumentConverter() result = converter.convert_single(source) print(result.render_as_markdown()) # output: "## DocLayNet: A Human -Annotated Dataset for Document -Layout Analysis [...]"\n```\nOptionally, you can configure custom pipeline features and runtime options, such as turning on or off features (e.g. OCR, table structure recognition), enforcing limits on the input document size, and defining the budget of CPU threads. Advanced usage examples and options are documented in the README file. Docling also provides a Dockerfile to demonstrate how to install and run it inside a container.',
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [2],
      title: "2 Getting Started",
    },
  },
  {
    text: "Docling implements a linear pipeline of operations, which execute sequentially on each given document (see Fig. 1). Each document is first parsed by a PDF backend, which retrieves the programmatic text tokens, consisting of string content and its coordinates on the page, and also renders a bitmap image of each page to support downstream operations. Then, the standard model pipeline applies a sequence of AI models independently on every page in the document to extract features and content, such as layout and table structures. Finally, the results from all pages are aggregated and passed through a post-processing stage, which augments metadata, detects the document language, infers reading-order and eventually assembles a typed document object which can be serialized to JSON or Markdown.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [2],
      title: "3 Processing pipeline",
    },
  },
  {
    text: "Two basic requirements to process PDF documents in our pipeline are a) to retrieve all text content and their geometric coordinates on each page and b) to render the visual representation of each page as it would appear in a PDF viewer. Both these requirements are encapsulated in Docling's PDF backend interface. While there are several open-source PDF parsing libraries available for python, we faced major obstacles with all of them for different reasons, among which were restrictive\n1 see huggingface.co/ds4sd/docling-models/\nFigure 1: Sketch of Docling's default processing pipeline. The inner part of the model pipeline is easily customizable and extensible.\nlicensing (e.g. pymupdf [7]), poor speed or unrecoverable quality issues, such as merged text cells across far-apart text tokens or table columns (pypdfium, PyPDF) [15, 14].\nWe therefore decided to provide multiple backend choices, and additionally open-source a custombuilt PDF parser, which is based on the low-level qpdf [4] library. It is made available in a separate package named docling-parse and powers the default PDF backend in Docling. As an alternative, we provide a PDF backend relying on pypdfium , which may be a safe backup choice in certain cases, e.g. if issues are seen with particular font encodings.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [2, 3],
      title: "3.1 PDF backends",
    },
  },
  {
    text: "As part of Docling, we initially release two highly capable AI models to the open-source community, which have been developed and published recently by our team. The first model is a layout analysis model, an accurate object-detector for page elements [13]. The second model is TableFormer [12, 9], a state-of-the-art table structure recognition model. We provide the pre-trained weights (hosted on huggingface) and a separate package for the inference code as docling-ibm-models . Both models are also powering the open-access deepsearch-experience, our cloud-native service for knowledge exploration tasks.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [3],
      title: "3.2 AI models",
    },
  },
  {
    text: "Our layout analysis model is an object-detector which predicts the bounding-boxes and classes of various elements on the image of a given page. Its architecture is derived from RT-DETR [16] and re-trained on DocLayNet [13], our popular human-annotated dataset for document-layout analysis, among other proprietary datasets. For inference, our implementation relies on the onnxruntime [5].\nThe Docling pipeline feeds page images at 72 dpi resolution, which can be processed on a single CPU with sub-second latency. All predicted bounding-box proposals for document elements are post-processed to remove overlapping proposals based on confidence and size, and then intersected with the text tokens in the PDF to group them into meaningful and complete units such as paragraphs, section titles, list items, captions, figures or tables.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [3],
      title: "Layout Analysis Model",
    },
  },
  {
    text: "The TableFormer model [12], first published in 2022 and since refined with a custom structure token language [9], is a vision-transformer model for table structure recovery. It can predict the logical row and column structure of a given table based on an input image, and determine which table cells belong to column headers, row headers or the table body. Compared to earlier approaches, TableFormer handles many characteristics of tables, such as partial or no borderlines, empty cells, rows or columns, cell spans and hierarchy both on column-heading or row-heading level, tables with inconsistent indentation or alignment and other complexities. For inference, our implementation relies on PyTorch [2].\nThe Docling pipeline feeds all table objects detected in the layout analysis to the TableFormer model, by providing an image-crop of the table and the included text cells. TableFormer structure predictions are matched back to the PDF cells in post-processing to avoid expensive re-transcription text in the table image. Typical tables require between 2 and 6 seconds to be processed on a standard CPU, strongly depending on the amount of included table cells.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [3, 4],
      title: "Table Structure Recognition",
    },
  },
  {
    text: "Docling provides optional support for OCR, for example to cover scanned PDFs or content in bitmaps images embedded on a page. In our initial release, we rely on EasyOCR [1], a popular thirdparty OCR library with support for many languages. Docling, by default, feeds a high-resolution page image (216 dpi) to the OCR engine, to allow capturing small print detail in decent quality. While EasyOCR delivers reasonable transcription quality, we observe that it runs fairly slow on CPU (upwards of 30 seconds per page).\nWe are actively seeking collaboration from the open-source community to extend Docling with additional OCR backends and speed improvements.",
    metadata: { filename: "2408.09869v5.pdf", page_numbers: [4], title: "OCR" },
  },
  {
    text: "In the final pipeline stage, Docling assembles all prediction results produced on each page into a well-defined datatype that encapsulates a converted document, as defined in the auxiliary package docling-core . The generated document object is passed through a post-processing model which leverages several algorithms to augment features, such as detection of the document language, correcting the reading order, matching figures with captions and labelling metadata such as title, authors and references. The final output can then be serialized to JSON or transformed into a Markdown representation at the users request.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [4],
      title: "3.3 Assembly",
    },
  },
  {
    text: "Docling provides a straight-forward interface to extend its capabilities, namely the model pipeline. A model pipeline constitutes the central part in the processing, following initial document parsing and preceding output assembly, and can be fully customized by sub-classing from an abstract baseclass ( BaseModelPipeline ) or cloning the default model pipeline. This effectively allows to fully customize the chain of models, add or replace models, and introduce additional pipeline configuration parameters. To use a custom model pipeline, the custom pipeline class to instantiate can be provided as an argument to the main document conversion methods. We invite everyone in the community to propose additional or alternative models and improvements.\nImplementations of model classes must satisfy the python Callable interface. The __call__ method must accept an iterator over page objects, and produce another iterator over the page objects which were augmented with the additional features predicted by the model, by extending the provided PagePredictions data model accordingly.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [4],
      title: "3.4 Extensibility",
    },
  },
  {
    text: "In this section, we establish some reference numbers for the processing speed of Docling and the resource budget it requires. All tests in this section are run with default options on our standard test set distributed with Docling, which consists of three papers from arXiv and two IBM Redbooks, with a total of 225 pages. Measurements were taken using both available PDF backends on two different hardware systems: one MacBook Pro M3 Max, and one bare-metal server running Ubuntu 20.04 LTS on an Intel Xeon E5-2690 CPU. For reproducibility, we fixed the thread budget (through setting OMP NUM THREADS environment variable ) once to 4 (Docling default) and once to 16 (equal to full core count on the test hardware). All results are shown in Table 1.\nIf you need to run Docling in very low-resource environments, please consider configuring the pypdfium backend. While it is faster and more memory efficient than the default docling-parse backend, it will come at the expense of worse quality results, especially in table structure recovery.\nEstablishing GPU acceleration support for the AI models is currently work-in-progress and largely untested, but may work implicitly when CUDA is available and discovered by the onnxruntime and\ntorch runtimes backing the Docling pipeline. We will deliver updates on this topic at in a future version of this report.\nTable 1: Runtime characteristics of Docling with the standard model pipeline and settings, on our test dataset of 225 pages, on two different systems. OCR is disabled. We show the time-to-solution (TTS), computed throughput in pages per second, and the peak memory used (resident set size) for both the Docling-native PDF backend and for the pypdfium backend, using 4 and 16 threads.\n\nApple M3 Max, Thread budget. = 4. Apple M3 Max, native backend.TTS = 177 s 167 s. Apple M3 Max, native backend.Pages/s = 1.27 1.34. Apple M3 Max, native backend.Mem = 6.20 GB. Apple M3 Max, pypdfium backend.TTS = 103 s 92 s. Apple M3 Max, pypdfium backend.Pages/s = 2.18 2.45. Apple M3 Max, pypdfium backend.Mem = 2.56 GB. (16 cores) Intel(R) E5-2690, Thread budget. = 16 4 16. (16 cores) Intel(R) E5-2690, native backend.TTS = 375 s 244 s. (16 cores) Intel(R) E5-2690, native backend.Pages/s = 0.60 0.92. (16 cores) Intel(R) E5-2690, native backend.Mem = 6.16 GB. (16 cores) Intel(R) E5-2690, pypdfium backend.TTS = 239 s 143 s. (16 cores) Intel(R) E5-2690, pypdfium backend.Pages/s = 0.94 1.57. (16 cores) Intel(R) E5-2690, pypdfium backend.Mem = 2.42 GB",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [4, 5],
      title: "4 Performance",
    },
  },
  {
    text: "Thanks to the high-quality, richly structured document conversion achieved by Docling, its output qualifies for numerous downstream applications. For example, Docling can provide a base for detailed enterprise document search, passage retrieval or classification use-cases, or support knowledge extraction pipelines, allowing specific treatment of different structures in the document, such as tables, figures, section structure or references. For popular generative AI application patterns, such as retrieval-augmented generation (RAG), we provide quackling , an open-source package which capitalizes on Docling's feature-rich document output to enable document-native optimized vector embedding and chunking. It plugs in seamlessly with LLM frameworks such as LlamaIndex [8]. Since Docling is fast, stable and cheap to run, it also makes for an excellent choice to build document-derived datasets. With its powerful table structure recognition, it provides significant benefit to automated knowledge-base construction [11, 10]. Docling is also integrated within the open IBM data prep kit [6], which implements scalable data transforms to build large-scale multi-modal training datasets.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [5],
      title: "5 Applications",
    },
  },
  {
    text: "Docling is designed to allow easy extension of the model library and pipelines. In the future, we plan to extend Docling with several more models, such as a figure-classifier model, an equationrecognition model, a code-recognition model and more. This will help improve the quality of conversion for specific types of content, as well as augment extracted document metadata with additional information. Further investment into testing and optimizing GPU acceleration as well as improving the Docling-native PDF backend are on our roadmap, too.\nWe encourage everyone to propose or implement additional features and models, and will gladly take your inputs and contributions under review . The codebase of Docling is open for use and contribution, under the MIT license agreement and in alignment with our contributing guidelines included in the Docling repository. If you use Docling in your projects, please consider citing this technical report.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [5],
      title: "6 Future work and contributions",
    },
  },
  {
    text: "[1] J. AI. Easyocr: Ready-to-use ocr with 80+ supported languages. https://github.com/ JaidedAI/EasyOCR , 2024. Version: 1.7.0.\n[2] J. Ansel, E. Yang, H. He, N. Gimelshein, A. Jain, M. Voznesensky, B. Bao, P. Bell, D. Berard, E. Burovski, G. Chauhan, A. Chourdia, W. Constable, A. Desmaison, Z. DeVito, E. Ellison, W. Feng, J. Gong, M. Gschwind, B. Hirsh, S. Huang, K. Kalambarkar, L. Kirsch, M. Lazos, M. Lezcano, Y. Liang, J. Liang, Y. Lu, C. Luk, B. Maher, Y. Pan, C. Puhrsch, M. Reso, M. Saroufim, M. Y. Siraichi, H. Suk, M. Suo, P. Tillet, E. Wang, X. Wang, W. Wen, S. Zhang, X. Zhao, K. Zhou, R. Zou, A. Mathews, G. Chanan, P. Wu, and S. Chintala. Pytorch 2: Faster\nmachine learning through dynamic python bytecode transformation and graph compilation. In Proceedings of the 29th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 2 (ASPLOS '24) . ACM, 4 2024. doi: 10.1145/3620665.3640366. URL https://pytorch.org/assets/pytorch2-2.pdf .\n[3] C. Auer, M. Dolfi, A. Carvalho, C. B. Ramis, and P. W. Staar. Delivering document conversion as a cloud service with high throughput and responsiveness. In 2022 IEEE 15th International Conference on Cloud Computing (CLOUD) , pages 363-373. IEEE, 2022.\n[4] J. Berkenbilt. Qpdf: A content-preserving pdf document transformer, 2024. URL https: //github.com/qpdf/qpdf .\n[5] O. R. developers. Onnx runtime. https://onnxruntime.ai/ , 2024. Version: 1.18.1.\n[6] IBM. Data Prep Kit: a community project to democratize and accelerate unstructured data preparation for LLM app developers, 2024. URL https://github.com/IBM/ data-prep-kit .\n[7] A. S. Inc. PyMuPDF, 2024. URL https://github.com/pymupdf/PyMuPDF .\n[8] J. Liu. LlamaIndex, 11 2022. URL https://github.com/jerryjliu/llama_index .\n[9] M. Lysak, A. Nassar, N. Livathinos, C. Auer, and P. Staar. Optimized Table Tokenization for Table Structure Recognition. In Document Analysis and Recognition - ICDAR 2023: 17th International Conference, San Jos´ e, CA, USA, August 21-26, 2023, Proceedings, Part II , pages 37-50, Berlin, Heidelberg, Aug. 2023. Springer-Verlag. ISBN 978-3-031-41678-1. doi: 10. 1007/978-3-031-41679-8 3. URL https://doi.org/10.1007/978-3-031-41679-8_3 .\n[10] L. Mishra, S. Dhibi, Y. Kim, C. Berrospi Ramis, S. Gupta, M. Dolfi, and P. Staar. Statements: Universal information extraction from tables with large language models for ESG KPIs. In D. Stammbach, J. Ni, T. Schimanski, K. Dutia, A. Singh, J. Bingler, C. Christiaen, N. Kushwaha, V. Muccione, S. A. Vaghefi, and M. Leippold, editors, Proceedings of the 1st Workshop on Natural Language Processing Meets Climate Change (ClimateNLP 2024) , pages 193-214, Bangkok, Thailand, Aug. 2024. Association for Computational Linguistics. URL https://aclanthology.org/2024.climatenlp-1.15 .\n[11] L. Morin, V. Weber, G. I. Meijer, F. Yu, and P. W. J. Staar. Patcid: an open-access dataset of chemical structures in patent documents. Nature Communications , 15(1):6532, August 2024. ISSN 2041-1723. doi: 10.1038/s41467-024-50779-y. URL https://doi.org/10.1038/ s41467-024-50779-y .\n[12] A. Nassar, N. Livathinos, M. Lysak, and P. Staar. Tableformer: Table structure understanding with transformers. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition , pages 4614-4623, 2022.\n[13] B. Pfitzmann, C. Auer, M. Dolfi, A. S. Nassar, and P. Staar. Doclaynet: a large humanannotated dataset for document-layout segmentation. pages 3743-3751, 2022.\n[14] pypdf Maintainers. pypdf: A Pure-Python PDF Library, 2024. URL https://github.com/ py-pdf/pypdf .\n[15] P. Team. PyPDFium2: Python bindings for PDFium, 2024. URL https://github.com/ pypdfium2-team/pypdfium2 .\n[16] Y. Zhao, W. Lv, S. Xu, J. Wei, G. Wang, Q. Dang, Y. Liu, and J. Chen. Detrs beat yolos on real-time object detection, 2023.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [5, 6],
      title: "References",
    },
  },
  {
    text: "In this section, we illustrate a few examples of Docling's output in Markdown and JSON.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title: "Appendix",
    },
  },
  {
    text: "Birgit Pfitzmann IBM Research Rueschlikon, Switzerland bpf@zurich.ibm.com\nChristoph Auer IBM Research Rueschlikon, Switzerland cau@zurich.ibm.com\nMichele Dolfi IBM Research Rueschlikon, Switzerland dol@zurich.ibm.com\nAhmed S. Nassar IBM Research Rueschlikon, Switzerland ahn@zurich.ibm.com\nPeter Staar IBM Research Rueschlikon, Switzerland taa@zurich.ibm.com",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title:
        "DocLayNet: A Large Human-Annotated Dataset for Document-Layout Analysis",
    },
  },
  {
    text: "Accurate document layout analysis is a key requirement for highquality PDF document conversion. With the recent availability of public, large ground-truth datasets such as PubLayNet and DocBank, deep-learning models have proven to be very effective at layout detection and segmentation. While these datasets are of adequate size to train such models, they severely lack in layout variability since they are sourced from scientific article repositories such as PubMed and arXiv only. Consequently, the accuracy of the layout segmentation drops significantly when these models are applied on more challenging and diverse layouts. In this paper, we present DocLayNet , a new, publicly available, document-layout annotation dataset in COCO format. It contains 80863 manually annotated pages from diverse data sources to represent a wide variability in layouts. For each PDF page, the layout annotations provide labelled bounding-boxes with a choice of 11 distinct classes. DocLayNet also provides a subset of double- and triple-annotated pages to determine the inter-annotator agreement. In multiple experiments, we provide baseline accuracy scores (in mAP) for a set of popular object detection models. We also demonstrate that these models fall approximately 10% behind the inter-annotator agreement. Furthermore, we provide evidence that DocLayNet is of sufficient size. Lastly, we compare models trained on PubLayNet, DocBank and DocLayNet, showing that layout predictions of the DocLayNettrained models are more robust and thus the preferred choice for general-purpose document-layout analysis.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title: "ABSTRACT",
    },
  },
  {
    text: "· Informationsystems → Documentstructure ; · Appliedcomputing → Document analysis ; · Computing methodologies → Machine learning Computer vision ; ; Object detection ;\nPermission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s). KDD '22, August 14-18, 2022, Washington, DC, USA © 2022 Copyright held by the owner/author(s). ACM ISBN 978-1-4503-9385-0/22/08. https://doi.org/10.1145/3534678.3539043\nBirgit Pfitzmann IBM Research Rueschlikon, Switzerland bpf@zurich.ibm.com\nChristoph Auer IBM Research Rueschlikon, Switzerland cau@zurich.ibm.com\nMichele Dolfi IBM Research Rueschlikon, Switzerland dol@zurich.ibm.com\nAhmed S. Nassar IBM Research Rueschlikon, Switzerland ahn@zurich.ibm.com\nPeter Staar IBM Research Rueschlikon, Switzerland taa@zurich.ibm.com",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title: "CCS CONCEPTS",
    },
  },
  {
    text: "Accurate document layout analysis is a key requirement for highquality PDF document conversion. With the recent availability of public, large groundtruth datasets such as PubLayNet and DocBank, deep-learning models have proven to be very effective at layout detection and segmentation. While these datasets are of adequate size to train such models, they severely lack in layout variability since they are sourced from scientific article repositories such as PubMed and arXiv only. Consequently, the accuracy of the layout segmentation drops significantly when these models are applied on more challenging and diverse layouts. In this paper, we present DocLayNet , a new, publicly available, document-layout annotation dataset in COCO format. It contains 80863 manually annotated pages from diverse data sources to represent a wide variability in layouts. For each PDF page, the layout annotations provide labelled bounding-boxes with a choice of 11 distinct classes. DocLayNet also provides a subset of double- and triple-annotated pages to determine the inter-annotator agreement. In multiple experiments, we provide baseline accuracy scores (in mAP) for a set of popular object detection models. We also demonstrate that these models fall approximately 10% behind the inter-annotator agreement. Furthermore, we provide evidence that DocLayNet is of sufficient size. Lastly, we compare models trained on PubLayNet, DocBank and DocLayNet, showing that layout predictions of the DocLayNettrained models are more robust and thus the preferred choice for general-purpose document-layout analysis.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title: "ABSTRACT",
    },
  },
  {
    text: "Æ Information systems → Document structure ; Æ Applied computing → Document analysis ; Æ Computing methodologies → Machine learning ; Computer vision ; Object detection ;\nPermission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s).\nKDD '22, August 14-18, 2022, Washington, DC, USA ' 2022 Copyright held by the owner/author(s). ACM ISBN 978-1-4503-9385-0/22/08. https://doi.org/10.1145/3534678.3539043\nFigure 1: Four examples of complex page layouts across different document categories",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title: "CCS CONCEPTS",
    },
  },
  {
    text: "PDF document conversion, layout segmentation, object-detection, data set, Machine Learning",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title: "KEYWORDS",
    },
  },
  {
    text: "Birgit Pfitzmann, Christoph Auer, Michele Dolfi, Ahmed S. Nassar, and Peter Staar. 2022. DocLayNet: A Large Human-Annotated Dataset for DocumentLayout Analysis. In Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD '22), August 14-18, 2022, Washington, DC, USA. ACM, New York, NY, USA, 9 pages. https://doi.org/10.1145/ 3534678.3539043\nAGL Energy Limited  ABN 74 1\n5 061 375\nFigure 1: Four examples of complex page layouts across different document categories",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title: "ACM Reference Format:",
    },
  },
  {
    text: "PDF document conversion, layout segmentation, object-detection, data set, Machine Learning",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7],
      title: "KEYWORDS",
    },
  },
  {
    text: "Birgit Pfitzmann, Christoph Auer, Michele Dolfi, Ahmed S. Nassar, and Peter Staar. 2022. DocLayNet: A Large Human-Annotated Dataset for DocumentLayout Analysis. In Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD '22), August 14-18, 2022, Washington, DC, USA. ACM, New York, NY, USA, 9 pages. https://doi.org/10.1145/ 3534678.3539043\n1 INTRODUCTION\nDespite the substantial improvements achieved with machine-learning (ML) approaches and deep neural networks in recent years, document conversion remains a challenging problem, as demonstrated by the numerous public competitions held on this topic [1-4]. The challenge originates from the huge variability in PDF documents regarding layout, language and formats (scanned, programmatic or a combination of both). Engineering a single ML model that can be applied on all types of documents and provides high-quality layout segmentation remains to this day extremely challenging [5]. To highlight the variability in document layouts, we show a few example documents from the DocLayNet dataset in Figure 1. Figure 2: Title page of the DocLayNet paper (arxiv.org/pdf/2206.01062) - left PDF, right rendered Markdown. If recognized, metadata such as authors are appearing first under the title. Text content inside figures is currently dropped, the caption is retained and linked to the figure in the JSON representation (not shown).\nKDD '22, August 14-18, 2022, Washington, DC, USA Birgit Pfitzmann, Christoph Auer, Michele Dolfi, Ahmed S. Nassar, and Peter Staar\nTable 2: Prediction performance (mAP@0.5-0.95) of object detection networks on DocLayNet test set. The MRCNN (Mask R-CNN) and FRCNN (Faster R-CNN) models with ResNet-50 or ResNet-101 backbone were trained based on the network architectures from the detectron2 model zoo (Mask R-CNN R50, R101-FPN 3x, Faster R-CNN R101-FPN 3x), with default configurations. The YOLO implementation utilized was YOLOv5x6 [13]. All models were initialised using pre-trained weights from the COCO 2017 dataset.\nCaption Footnote Formula List-item Page-footer Page-header Picture Section-header Table Text Title All, human = 84-89 83-91 83-85 87-88 93-94 85-89 69-71 83-84 77-81 84-86 60-72 82-83. Caption Footnote Formula List-item Page-footer Page-header Picture Section-header Table Text Title All, MRCNN R50 R101 = 68.4 71.5 70.9 71.8 60.1 63.4 81.2 80.8 61.6 59.3 71.9 70.0 71.7 72.7 67.6 69.3 82.2 82.9 84.6 85.8 76.7 80.4 72.4 73.5. Caption Footnote Formula List-item Page-footer Page-header Picture Section-header Table Text Title All, FRCNN R101 = 70.1 73.7 63.5 81.0 58.9 72.0 72.0 68.4 82.2 85.4 79.9 73.4. Caption Footnote Formula List-item Page-footer Page-header Picture Section-header Table Text Title All, YOLO v5x6 = 77.7 77.2 66.2 86.2 61.1 67.9 77.1 74.6 86.3 88.1 82.7 76.8\nto avoid this at any cost in order to have clear, unbiased baseline numbers for human document-layout annotation. Third, we introduced the feature of snapping boxes around text segments to obtain a pixel-accurate annotation and again reduce time and effort. The CCS annotation tool automatically shrinks every user-drawn box to the minimum bounding-box around the enclosed text-cells for all purely text-based segments, which excludes only Table and Picture . For the latter, we instructed annotation staff to minimise inclusion of surrounding whitespace while including all graphical lines. A downside of snapping boxes to enclosed text cells is that some wrongly parsed PDF pages cannot be annotated correctly and need to be skipped. Fourth, we established a way to flag pages as rejected for cases where no valid annotation according to the label guidelines could be achieved. Example cases for this would be PDF pages that render incorrectly or contain layouts that are impossible to capture with non-overlapping rectangles. Such rejected pages are not contained in the final dataset. With all these measures in place, experienced annotation staff managed to annotate a single page in a typical timeframe of 20s to 60s, depending on its complexity.",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [7, 8],
      title: "ACMReference Format:",
    },
  },
  {
    text: "The primary goal of DocLayNet is to obtain high-quality ML models capable of accurate document-layout analysis on a wide variety of challenging layouts. As discussed in Section 2, object detection models are currently the easiest to use, due to the standardisation of ground-truth data in COCO format [16] and the availability of general frameworks such as detectron2 [17]. Furthermore, baseline numbers in PubLayNet and DocBank were obtained using standard object detection models such as Mask R-CNN and Faster R-CNN. As such, we will relate to these object detection methods in this\nThird, achienec",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [8],
      title: "5 EXPERIMENTS",
    },
  },
  {
    text: "chalenongayouls ground-vuth dawa such WC\nFigure 5: Prediction performance (mAP@0.5-0.95) of a Mask R-CNNnetworkwithResNet50backbonetrainedonincreasing fractions of the DocLayNet dataset. The learning curve flattens around the 80% mark, indicating that increasing the size of the DocLayNet dataset with similar data will not yield significantly better predictions.\npaper and leave the detailed evaluation of more recent methods mentioned in Section 2 for future work.\nIn this section, we will present several aspects related to the performance of object detection models on DocLayNet. Similarly as in PubLayNet, we will evaluate the quality of their predictions using mean average precision (mAP) with 10 overlaps that range from 0.5 to 0.95 in steps of 0.05 (mAP@0.5-0.95). These scores are computed by leveraging the evaluation code provided by the COCO API [16].",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [8],
      title: "EXPERIMENTS",
    },
  },
  {
    text: "In Table 2, we present baseline experiments (given in mAP) on Mask R-CNN [12], Faster R-CNN [11], and YOLOv5 [13]. Both training and evaluation were performed on RGB images with dimensions of 1025 × 1025 pixels. For training, we only used one annotation in case of redundantly annotated pages. As one can observe, the variation in mAP between the models is rather low, but overall between 6 and 10% lower than the mAP computed from the pairwise human annotations on triple-annotated pages. This gives a good indication that the DocLayNet dataset poses a worthwhile challenge for the research community to close the gap between human recognition and ML approaches. It is interesting to see that Mask R-CNN and Faster R-CNN produce very comparable mAP scores, indicating that pixel-based image segmentation derived from bounding-boxes does not help to obtain better predictions. On the other hand, the more recent Yolov5x model does very well and even out-performs humans on selected labels such as Text , Table and Picture . This is not entirely surprising, as Text , Table and Picture are abundant and the most visually distinctive in a document.\ncoioct dcochon modols\nmak enbrel\nFigure 3: Page 6 of the DocLayNet paper. If recognized, metadata such as authors are appearing first under the title. Elements recognized as page headers or footers are suppressed in Markdown to deliver uninterrupted content in reading order. Tables are inserted in reading order. The paragraph in '5. Experiments' wrapping over the column end is broken up in two and interrupted by the table.\nKDD '22, August 14-18, 2022, Washington, DC, USA\nBirgit Pfitzmann, Christoph Auer, Michele Dolfi, Ahmed S. Nassar, and Peter Staar\nTable 1: DocLayNet dataset overview. Along with the frequency of each class label, we present the relative occurrence (as %\nbetween pairwise annotations from the triple-annotated pages, from which we obtain accuracy ranges.\nof row 'Total') in the train, test and validation sets. The inter-annotator agreement is computed as the mAP@0.5-0.95 metric\nCaption, Count.Count = 22524. Caption, % of Total.Train = 2.04. Caption, % of Total.Test = 1.77. Caption, % of Total.Val = 2.32. Caption, triple inter-annotator mAP @0.5-0.95 (%).All = 84-89. Caption, triple inter-annotator mAP @0.5-0.95 (%).Fin = 40-61. Caption, triple inter-annotator mAP @0.5-0.95 (%).Man = 86-92. Caption, triple inter-annotator mAP @0.5-0.95 (%).Sci = 94-99. Caption, triple inter-annotator mAP @0.5-0.95 (%).Law = 95-99. Caption, triple inter-annotator mAP @0.5-0.95 (%).Pat = 69-78. Caption, triple inter-annotator mAP @0.5-0.95 (%).Ten = n/a. Footnote, Count.Count = 6318. Footnote, % of Total.Train = 0.60. Footnote, % of Total.Test = 0.31. Footnote, % of Total.Val = 0.58. Footnote, triple inter-annotator mAP @0.5-0.95 (%).All = 83-91. Footnote, triple inter-annotator mAP @0.5-0.95 (%).Fin = n/a. Footnote, triple inter-annotator mAP @0.5-0.95 (%).Man = 100. Footnote, triple inter-annotator mAP @0.5-0.95 (%).Sci = 62-88. Footnote, triple inter-annotator mAP @0.5-0.95 (%).Law = 85-94. Footnote, triple inter-annotator mAP @0.5-0.95 (%).Pat = n/a. Footnote, triple inter-annotator mAP @0.5-0.95 (%).Ten = 82-97. Formula, Count.Count = 25027. Formula, % of Total.Train = 2.25. Formula, % of Total.Test = 1.90. Formula, % of Total.Val = 2.96. Formula, triple inter-annotator mAP @0.5-0.95 (%).All = 83-85. Formula, triple inter-annotator mAP @0.5-0.95 (%).Fin = n/a. Formula, triple inter-annotator mAP @0.5-0.95 (%).Man = n/a. Formula, triple inter-annotator mAP @0.5-0.95 (%).Sci = 84-87. Formula, triple inter-annotator mAP @0.5-0.95 (%).Law = 86-96. Formula, triple inter-annotator mAP @0.5-0.95 (%).Pat = n/a. Formula, triple inter-annotator mAP @0.5-0.95 (%).Ten = n/a. List-item, Count.Count = 185660. List-item, % of Total.Train = 17.19. List-item, % of Total.Test = 13.34. List-item, % of Total.Val = 15.82. List-item, triple inter-annotator mAP @0.5-0.95 (%).All = 87-88. List-item, triple inter-annotator mAP @0.5-0.95 (%).Fin = 74-83. List-item, triple inter-annotator mAP @0.5-0.95 (%).Man = 90-92. List-item, triple inter-annotator mAP @0.5-0.95 (%).Sci = 97-97. List-item, triple inter-annotator mAP @0.5-0.95 (%).Law = 81-85. List-item, triple inter-annotator mAP @0.5-0.95 (%).Pat = 75-88. List-item, triple inter-annotator mAP @0.5-0.95 (%).Ten = 93-95. Page-footer, Count.Count = 70878. Page-footer, % of Total.Train = 6.51. Page-footer, % of Total.Test = 5.58. Page-footer, % of Total.Val = 6.00. Page-footer, triple inter-annotator mAP @0.5-0.95 (%).All = 93-94. Page-footer, triple inter-annotator mAP @0.5-0.95 (%).Fin = 88-90. Page-footer, triple inter-annotator mAP @0.5-0.95 (%).Man = 95-96. Page-footer, triple inter-annotator mAP @0.5-0.95 (%).Sci = 100. Page-footer, triple inter-annotator mAP @0.5-0.95 (%).Law = 92-97. Page-footer, triple inter-annotator mAP @0.5-0.95 (%).Pat = 100. Page-footer, triple inter-annotator mAP @0.5-0.95 (%).Ten = 96-98. Page-header, Count.Count = 58022. Page-header, % of Total.Train = 5.10. Page-header, % of Total.Test = 6.70. Page-header, % of Total.Val = 5.06. Page-header, triple inter-annotator mAP @0.5-0.95 (%).All = 85-89. Page-header, triple inter-annotator mAP @0.5-0.95 (%).Fin = 66-76. Page-header, triple inter-annotator mAP @0.5-0.95 (%).Man = 90-94. Page-header, triple inter-annotator mAP @0.5-0.95 (%).Sci = 98-100. Page-header, triple inter-annotator mAP @0.5-0.95 (%).Law = 91-92. Page-header, triple inter-annotator mAP @0.5-0.95 (%).Pat = 97-99. Page-header, triple inter-annotator mAP @0.5-0.95 (%).Ten = 81-86. Picture, Count.Count = 45976. Picture, % of Total.Train = 4.21. Picture, % of Total.Test = 2.78. Picture, % of Total.Val = 5.31. Picture, triple inter-annotator mAP @0.5-0.95 (%).All = 69-71. Picture, triple inter-annotator mAP @0.5-0.95 (%).Fin = 56-59. Picture, triple inter-annotator mAP @0.5-0.95 (%).Man = 82-86. Picture, triple inter-annotator mAP @0.5-0.95 (%).Sci = 69-82. Picture, triple inter-annotator mAP @0.5-0.95 (%).Law = 80-95. Picture, triple inter-annotator mAP @0.5-0.95 (%).Pat = 66-71. Picture, triple inter-annotator mAP @0.5-0.95 (%).Ten = 59-76. Section-header, Count.Count = 142884. Section-header, % of Total.Train = 12.60. Section-header, % of Total.Test = 15.77. Section-header, % of Total.Val = 12.85. Section-header, triple inter-annotator mAP @0.5-0.95 (%).All = 83-84. Section-header, triple inter-annotator mAP @0.5-0.95 (%).Fin = 76-81. Section-header, triple inter-annotator mAP @0.5-0.95 (%).Man = 90-92. Section-header, triple inter-annotator mAP @0.5-0.95 (%).Sci = 94-95. Section-header, triple inter-annotator mAP @0.5-0.95 (%).Law = 87-94. Section-header, triple inter-annotator mAP @0.5-0.95 (%).Pat = 69-73. Section-header, triple inter-annotator mAP @0.5-0.95 (%).Ten = 78-86. Table, Count.Count = 34733. Table, % of Total.Train = 3.20. Table, % of Total.Test = 2.27. Table, % of Total.Val = 3.60. Table, triple inter-annotator mAP @0.5-0.95 (%).All = 77-81. Table, triple inter-annotator mAP @0.5-0.95 (%).Fin = 75-80. Table, triple inter-annotator mAP @0.5-0.95 (%).Man = 83-86. Table, triple inter-annotator mAP @0.5-0.95 (%).Sci = 98-99. Table, triple inter-annotator mAP @0.5-0.95 (%).Law = 58-80. Table, triple inter-annotator mAP @0.5-0.95 (%).Pat = 79-84. Table, triple inter-annotator mAP @0.5-0.95 (%).Ten = 70-85. Text, Count.Count = 510377. Text, % of Total.Train = 45.82. Text, % of Total.Test = 49.28. Text, % of Total.Val = 45.00. Text, triple inter-annotator mAP @0.5-0.95 (%).All = 84-86. Text, triple inter-annotator mAP @0.5-0.95 (%).Fin = 81-86. Text, triple inter-annotator mAP @0.5-0.95 (%).Man = 88-93. Text, triple inter-annotator mAP @0.5-0.95 (%).Sci = 89-93. Text, triple inter-annotator mAP @0.5-0.95 (%).Law = 87-92. Text, triple inter-annotator mAP @0.5-0.95 (%).Pat = 71-79. Text, triple inter-annotator mAP @0.5-0.95 (%).Ten = 87-95. Title, Count.Count = 5071. Title, % of Total.Train = 0.47. Title, % of Total.Test = 0.30. Title, % of Total.Val = 0.50. Title, triple inter-annotator mAP @0.5-0.95 (%).All = 60-72. Title, triple inter-annotator mAP @0.5-0.95 (%).Fin = 24-63. Title, triple inter-annotator mAP @0.5-0.95 (%).Man = 50-63. Title, triple inter-annotator mAP @0.5-0.95 (%).Sci = 94-100. Title, triple inter-annotator mAP @0.5-0.95 (%).Law = 82-96. Title, triple inter-annotator mAP @0.5-0.95 (%).Pat = 68-79. Title, triple inter-annotator mAP @0.5-0.95 (%).Ten = 24-56. Total, Count.Count = 1107470. Total, % of Total.Train = 941123. Total, % of Total.Test = 99816. Total, % of Total.Val = 66531. Total, triple inter-annotator mAP @0.5-0.95 (%).All = 82-83. Total, triple inter-annotator mAP @0.5-0.95 (%).Fin = 71-74. Total, triple inter-annotator mAP @0.5-0.95 (%).Man = 79-81. Total, triple inter-annotator mAP @0.5-0.95 (%).Sci = 89-94. Total, triple inter-annotator mAP @0.5-0.95 (%).Law = 86-91. Total, triple inter-annotator mAP @0.5-0.95 (%).Pat = 71-76. Total, triple inter-annotator mAP @0.5-0.95 (%).Ten = 68-85\ninclude publication repositories such as arXiv\nTable 1: DocLayNet dataset overview. Along with the frequency of each class label, we present the relative occurrence (as % of row \"Total\") in the train, test and validation sets. The inter-annotator agreement is computed as the mAP@0.5-0.95 metric between pairwise annotations from the triple-\nannotated pages, from which we obtain accuracy ranges.\nclass label,  = Count. class label, %of Total = Train. class label, %of Total = Test. class label, %of Total = Val. class label, triple inter- annotator mAP @ 0.5-0.95 (%) = All. class label, triple inter- annotator mAP @ 0.5-0.95 (%) = Fin. class label, triple inter- annotator mAP @ 0.5-0.95 (%) = Man. class label, triple inter- annotator mAP @ 0.5-0.95 (%) = Sci. class label, triple inter- annotator mAP @ 0.5-0.95 (%) = Law. class label, triple inter- annotator mAP @ 0.5-0.95 (%) = Pat. class label, triple inter- annotator mAP @ 0.5-0.95 (%) = Ten. Caption,  = 22524. Caption, %of Total = 2.04. Caption, %of Total = 1.77. Caption, %of Total = 2.32. Caption, triple inter- annotator mAP @ 0.5-0.95 (%) = 84-89. Caption, triple inter- annotator mAP @ 0.5-0.95 (%) = 40-61. Caption, triple inter- annotator mAP @ 0.5-0.95 (%) = 86-92. Caption, triple inter- annotator mAP @ 0.5-0.95 (%) = 94-99. Caption, triple inter- annotator mAP @ 0.5-0.95 (%) = 95-99. Caption, triple inter- annotator mAP @ 0.5-0.95 (%) = 69-78. Caption, triple inter- annotator mAP @ 0.5-0.95 (%) = n/a. Footnote,  = 6318. Footnote, %of Total = 0.60. Footnote, %of Total = 0.31. Footnote, %of Total = 0.58. Footnote, triple inter- annotator mAP @ 0.5-0.95 (%) = 83-91. Footnote, triple inter- annotator mAP @ 0.5-0.95 (%) = n/a. Footnote, triple inter- annotator mAP @ 0.5-0.95 (%) = 100. Footnote, triple inter- annotator mAP @ 0.5-0.95 (%) = 62-88. Footnote, triple inter- annotator mAP @ 0.5-0.95 (%) = 85-94. Footnote, triple inter- annotator mAP @ 0.5-0.95 (%) = n/a. Footnote, triple inter- annotator mAP @ 0.5-0.95 (%) = 82-97. Formula,  = 25027. Formula, %of Total = 2.25. Formula, %of Total = 1.90. Formula, %of Total = 2.96. Formula, triple inter- annotator mAP @ 0.5-0.95 (%) = 83-85. Formula, triple inter- annotator mAP @ 0.5-0.95 (%) = n/a. Formula, triple inter- annotator mAP @ 0.5-0.95 (%) = n/a. Formula, triple inter- annotator mAP @ 0.5-0.95 (%) = 84-87. Formula, triple inter- annotator mAP @ 0.5-0.95 (%) = 86-96. Formula, triple inter- annotator mAP @ 0.5-0.95 (%) = n/a. Formula, triple inter- annotator mAP @ 0.5-0.95 (%) = n/a. List-item,  = 185660. List-item, %of Total = 17.19. List-item, %of Total = 13.34. List-item, %of Total = 15.82. List-item, triple inter- annotator mAP @ 0.5-0.95 (%) = 87-88. List-item, triple inter- annotator mAP @ 0.5-0.95 (%) = 74-83. List-item, triple inter- annotator mAP @ 0.5-0.95 (%) = 90-92. List-item, triple inter- annotator mAP @ 0.5-0.95 (%) = 97-97. List-item, triple inter- annotator mAP @ 0.5-0.95 (%) = 81-85. List-item, triple inter- annotator mAP @ 0.5-0.95 (%) = 75-88. List-item, triple inter- annotator mAP @ 0.5-0.95 (%) = 93-95. Page- footer,  = 70878. Page- footer, %of Total = 6.51. Page- footer, %of Total = 5.58. Page- footer, %of Total = 6.00. Page- footer, triple inter- annotator mAP @ 0.5-0.95 (%) = 93-94. Page- footer, triple inter- annotator mAP @ 0.5-0.95 (%) = 88-90. Page- footer, triple inter- annotator mAP @ 0.5-0.95 (%) = 95-96. Page- footer, triple inter- annotator mAP @ 0.5-0.95 (%) = 100. Page- footer, triple inter- annotator mAP @ 0.5-0.95 (%) = 92-97. Page- footer, triple inter- annotator mAP @ 0.5-0.95 (%) = 100. Page- footer, triple inter- annotator mAP @ 0.5-0.95 (%) = 96-98. Page- header offices,,  = 58022. Page- header offices,, %of Total = 5.10. Page- header offices,, %of Total = 6.70. Page- header offices,, %of Total = 5.06. Page- header offices,, triple inter- annotator mAP @ 0.5-0.95 (%) = 85-89. Page- header offices,, triple inter- annotator mAP @ 0.5-0.95 (%) = 66-76. Page- header offices,, triple inter- annotator mAP @ 0.5-0.95 (%) = 90-94. Page- header offices,, triple inter- annotator mAP @ 0.5-0.95 (%) = 98-100. Page- header offices,, triple inter- annotator mAP @ 0.5-0.95 (%) = 91-92. Page- header offices,, triple inter- annotator mAP @ 0.5-0.95 (%) = 97-99. Page- header offices,, triple inter- annotator mAP @ 0.5-0.95 (%) = 81-86. Picture,  = 45976. Picture, %of Total = 4.21. Picture, %of Total = 2.78. Picture, %of Total = 5.31. Picture, triple inter- annotator mAP @ 0.5-0.95 (%) = 69-71. Picture, triple inter- annotator mAP @ 0.5-0.95 (%) = 56-59. Picture, triple inter- annotator mAP @ 0.5-0.95 (%) = 82-86. Picture, triple inter- annotator mAP @ 0.5-0.95 (%) = 69-82. Picture, triple inter- annotator mAP @ 0.5-0.95 (%) = 80-95. Picture, triple inter- annotator mAP @ 0.5-0.95 (%) = 66-71. Picture, triple inter- annotator mAP @ 0.5-0.95 (%) = 59-76. Section- header not,  = 142884. Section- header not, %of Total = 12.60. Section- header not, %of Total = 15.77. Section- header not, %of Total = 12.85. Section- header not, triple inter- annotator mAP @ 0.5-0.95 (%) = 83-84. Section- header not, triple inter- annotator mAP @ 0.5-0.95 (%) = 76-81. Section- header not, triple inter- annotator mAP @ 0.5-0.95 (%) = 90-92. Section- header not, triple inter- annotator mAP @ 0.5-0.95 (%) = 94-95. Section- header not, triple inter- annotator mAP @ 0.5-0.95 (%) = 87-94. Section- header not, triple inter- annotator mAP @ 0.5-0.95 (%) = 69-73. Section- header not, triple inter- annotator mAP @ 0.5-0.95 (%) = 78-86. Table,  = 34733. Table, %of Total = 3.20. Table, %of Total = 2.27. Table, %of Total = 3.60. Table, triple inter- annotator mAP @ 0.5-0.95 (%) = 77-81. Table, triple inter- annotator mAP @ 0.5-0.95 (%) = 75-80. Table, triple inter- annotator mAP @ 0.5-0.95 (%) = 83-86. Table, triple inter- annotator mAP @ 0.5-0.95 (%) = 98-99. Table, triple inter- annotator mAP @ 0.5-0.95 (%) = 58-80. Table, triple inter- annotator mAP @ 0.5-0.95 (%) = 79-84. Table, triple inter- annotator mAP @ 0.5-0.95 (%) = 70-85. Text,  = 510377. Text, %of Total = 45.82. Text, %of Total = 49.28. Text, %of Total = 45.00. Text, triple inter- annotator mAP @ 0.5-0.95 (%) = 84-86. Text, triple inter- annotator mAP @ 0.5-0.95 (%) = 81-86. Text, triple inter- annotator mAP @ 0.5-0.95 (%) = 88-93. Text, triple inter- annotator mAP @ 0.5-0.95 (%) = 89-93. Text, triple inter- annotator mAP @ 0.5-0.95 (%) = 87-92. Text, triple inter- annotator mAP @ 0.5-0.95 (%) = 71-79. Text, triple inter- annotator mAP @ 0.5-0.95 (%) = 87-95. Title [22], a,  = 5071. Title [22], a, %of Total = 0.47. Title [22], a, %of Total = 0.30. Title [22], a, %of Total = 0.50. Title [22], a, triple inter- annotator mAP @ 0.5-0.95 (%) = 60-72. Title [22], a, triple inter- annotator mAP @ 0.5-0.95 (%) = 24-63. Title [22], a, triple inter- annotator mAP @ 0.5-0.95 (%) = 50-63. Title [22], a, triple inter- annotator mAP @ 0.5-0.95 (%) = 94-100. Title [22], a, triple inter- annotator mAP @ 0.5-0.95 (%) = 82-96. Title [22], a, triple inter- annotator mAP @ 0.5-0.95 (%) = 68-79. Title [22], a, triple inter- annotator mAP @ 0.5-0.95 (%) = 24-56. Total in-,  = 1107470. Total in-, %of Total = 941123. Total in-, %of Total = 99816. Total in-, %of Total = 66531. Total in-, triple inter- annotator mAP @ 0.5-0.95 (%) = 82-83. Total in-, triple inter- annotator mAP @ 0.5-0.95 (%) = 71-74. Total in-, triple inter- annotator mAP @ 0.5-0.95 (%) = 79-81. Total in-, triple inter- annotator mAP @ 0.5-0.95 (%) = 89-94. Total in-, triple inter- annotator mAP @ 0.5-0.95 (%) = 86-91. Total in-, triple inter- annotator mAP @ 0.5-0.95 (%) = 71-76. Total in-, triple inter- annotator mAP @ 0.5-0.95 (%) = 68-85\n3\n,\ngovernment offices,\nWe reviewed the col-\n,\nPage-\nTitle and\n.\npage. Specificity ensures that the choice of label is not ambiguous,\nwe distributed the annotation workload and performed continuous be annotated. We refrained from class labels that are very specific\nonly. For phases three and four, a group of 40 dedicated annotators while coverage ensures that all meaningful items on a page can\nquality controls. Phase one and two required a small team of experts to a document category, such as\nAbstract in the\nScientific Articles were assembled and supervised.\ncategory. We also avoided class labels that are tightly linked to the\nPhase 1: Data selection and preparation.\nOur inclusion cri-\nAuthor\nAffiliation\nteria for documents were described in Section 3. A large effort went into ensuring that all documents are free to use. The data sources in DocBank, are often only distinguishable by discriminating on 3 https://arxiv.org/ Figure 4: Table 1 from the DocLayNet paper in the original PDF (A), as rendered Markdown (B) and in JSON representation (C). Spanning table cells, such as the multi-column header 'triple interannotator mAP@0.5-0.95 (%)', is repeated for each column in the Markdown representation (B), which guarantees that every data point can be traced back to row and column headings only by its grid coordinates in the table. In the JSON representation, the span information is reflected in the fields of each table cell (C).\nsemantics of the text. Labels such as and\n,\nas seen",
    metadata: {
      filename: "2408.09869v5.pdf",
      page_numbers: [8, 9],
      title: "Baselines for Object Detection",
    },
  },
];
